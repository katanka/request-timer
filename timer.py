import requests
import time
from tqdm import tqdm
import sys
import numpy as numpy
import matplotlib.pyplot as plt
import random
from math import floor

new_times = []

def mean(input):
	return float(sum(input))/len(input) if len(input) > 0 else float('nan')

if len(sys.argv) != 3:
	print 'Usage: python timer.py [URL] [sample size]'
	exit()

print "Timing requests to " + sys.argv[1]

r = requests.get(sys.argv[1])
r.content

for x in tqdm(xrange(1,int(sys.argv[2])+1)):
	start = time.time()
	r = requests.get(sys.argv[1])
	r.content  # wait until full content has been transfered
	roundtrip = time.time() - start
	new_times.append(roundtrip)

print "Done!\n\nStatistics:"

print new_times

master_times = [3.6868410110473633, 3.5714271068573, 3.4527599811553955, 3.518733024597168, 3.7061359882354736, 3.599091053009033, 3.5192999839782715, 3.506922960281372, 3.6442370414733887, 3.4633030891418457, 3.427557945251465, 3.467679977416992, 3.505993127822876, 3.4345881938934326, 3.3828508853912354, 3.517632007598877, 3.882267951965332, 3.5894501209259033, 4.1486639976501465, 3.93710994720459, 3.5008771419525146, 3.5646510124206543, 3.437286853790283, 3.859236001968384, 3.5812342166900635, 3.5175888538360596, 3.404813051223755, 3.439723014831543, 3.414353847503662, 3.5373759269714355, 3.6126959323883057, 3.9393270015716553, 3.7745440006256104, 3.659151077270508, 3.3922598361968994, 3.706418991088867, 3.4185450077056885, 3.47409987449646, 3.4481029510498047, 3.4168200492858887, 3.4548990726470947, 4.036970138549805, 3.5740809440612793, 3.5152029991149902, 3.468327045440674, 3.5736470222473145, 3.480393886566162, 3.5154778957366943, 3.4585940837860107, 3.4803659915924072, 3.504261016845703, 3.504239082336426, 3.4327430725097656, 3.6269891262054443, 3.9007527828216553, 4.504777908325195, 3.675961971282959, 3.7196199893951416, 3.3917839527130127, 3.811537981033325, 3.5691890716552734, 3.5975189208984375, 3.4928228855133057, 3.6024060249328613, 3.425964117050171, 3.53523588180542, 3.5035459995269775, 3.451807975769043, 3.4398717880249023, 3.4328699111938477, 3.443408966064453, 3.4877519607543945, 3.4251708984375, 3.5164639949798584, 3.5620510578155518, 3.357877016067505, 3.5128748416900635, 3.5755200386047363, 3.665750026702881, 3.6275758743286133, 4.01304292678833, 3.8968091011047363, 3.500883102416992, 3.4776439666748047, 3.4850118160247803, 3.4781999588012695, 3.642836093902588, 3.508639097213745, 3.4668731689453125, 3.9437670707702637, 3.6346700191497803, 3.372446060180664, 3.829957962036133, 4.108835935592651, 3.770542860031128, 3.647955894470215, 3.539156913757324, 3.515522003173828, 3.5054759979248047, 3.5245110988616943, 4.084510087966919, 3.852656126022339, 4.026575803756714, 3.8895790576934814, 3.5318100452423096, 3.4575388431549072, 3.4566869735717773, 3.437384843826294, 3.4573440551757812, 3.4783542156219482, 3.46451997756958, 3.423643112182617, 3.8830978870391846, 3.6117169857025146, 3.5568158626556396, 3.4322569370269775, 3.488741874694824, 3.4606728553771973, 3.5378878116607666, 3.450561046600342, 3.5002830028533936, 3.5699191093444824, 3.5179779529571533, 3.5406601428985596, 3.445215940475464, 3.3993639945983887, 3.488523006439209, 3.4258570671081543, 3.446141004562378, 3.4591469764709473, 3.563344955444336, 3.4915270805358887, 3.5308480262756348, 3.4098548889160156, 3.447845935821533, 3.501677989959717, 3.4444479942321777, 3.436739921569824, 3.5587708950042725, 3.504934072494507, 3.5065419673919678, 3.5548970699310303, 3.3769619464874268, 3.744473934173584, 3.908194065093994, 4.361868858337402, 4.137075901031494, 3.502586841583252, 3.4851009845733643, 3.475255012512207, 3.4852590560913086, 3.440537929534912, 3.607887029647827, 3.4769768714904785, 3.412541151046753, 4.2683961391448975, 3.462346076965332, 3.5393929481506348, 3.3135881423950195, 3.5358848571777344, 3.4730639457702637, 3.822348117828369, 3.6009738445281982, 3.4641759395599365, 3.447507858276367, 3.62691593170166, 3.4014410972595215, 3.4354469776153564, 3.5190680027008057, 3.523994207382202, 3.6285510063171387, 3.4278042316436768, 3.500917911529541, 3.5061910152435303, 3.5593700408935547, 3.4412648677825928, 3.457698106765747, 3.5429329872131348, 3.5526649951934814, 3.532397985458374, 3.517256021499634, 3.4447808265686035, 3.5193588733673096, 3.724540948867798, 3.4832918643951416, 3.4734299182891846, 3.5050370693206787, 3.4147050380706787, 3.3783721923828125, 3.477591037750244, 3.519656181335449, 3.5205538272857666, 3.426039934158325, 3.482975959777832, 3.405210018157959, 3.446103096008301, 4.244455814361572, 3.6583080291748047, 4.2212560176849365, 3.8214361667633057]

new_weights = numpy.ones_like(new_times)/len(new_times)
master_weights = numpy.ones_like(master_times)/len(master_times)

binwidth = 0.025

bins = numpy.arange(0, 5, binwidth*2)


n, bins, patches = plt.hist(new_times, bins=bins, facecolor='green', alpha=0.5, label='SOC-2554', weights = new_weights)
plt.hist(master_times, bins, facecolor='blue', alpha=0.5, label='master', weights = master_weights)

xMax = max(max(new_times), max(master_times))+0.5
xMin = min(min(new_times), min(master_times))-0.5
yMax = max(n)*1.25
yMin = 0

on_master = False

title = r'$\mathrm{Histogram\ of\ Request\ Times\ (N=%s)}$' % sys.argv[2]

plt.xlabel('Request Time (s)')
plt.ylabel('Frequency')
plt.title(title)
plt.axis([xMin, xMax, yMin, yMax])
plt.legend(loc='upper right')

plt.grid(True)

plt.show()


